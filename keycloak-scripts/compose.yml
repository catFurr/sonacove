# Keycloak and Postgres

services:
    keycloak:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: keycloak
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - proxy-network
        environment:
            KC_DB_USERNAME: keycloak
            KC_DB_PASSWORD: ${KC_DB_PASSWORD}
            KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
            KC_BOOTSTRAP_ADMIN_USER: ${KC_ADMIN_USER}
            KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}

            KC_HOSTNAME: ${KC_HOSTNAME} # e.g., staj.sonacove.com/auth
            KC_HOSTNAME_STRICT: true
            KC_HTTP_ENABLED: true # Keycloak runs on HTTP, Traefik handles HTTPS
            KC_PROXY_HEADERS: xforwarded # Correct for Traefik

            KC_EVENT_METRICS_USER_EVENTS: register,login,logout
            KC_VAULT_DIR: /opt/keycloak/vault # Tell Keycloak where the vault directory is
            # Pass through the env vars needed by entrypoint.sh to populate vault files
            KC_REGISTRATION_API_URL: ${KC_REGISTRATION_API_URL}
            KC_WEBHOOK_SECRET: ${KC_WEBHOOK_SECRET}
            KC_CLIENT_SECRET: ${KC_CLIENT_SECRET} # Client secret for realm configuration
            KC_REALM_NAME: ${KC_REALM_NAME:-jitsi} # Pass realm name for entrypoint script

        entrypoint: ["/opt/keycloak/entrypoint.sh"]
        command:
            [
                "start",
                "--optimized",
                "--import-realm",
                "--spi-events-listener-ext-event-webhook-store-webhook-events=true",
            ]
        volumes:
            - ./realm-export.json:/opt/keycloak/realm-template.json:ro # Mount as template, not in import directory
            - ./entrypoint.sh:/opt/keycloak/entrypoint.sh:ro # Mount the entrypoint script
        restart: unless-stopped
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:9000/auth/health/ready"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 60s # Give Keycloak some time to start up before first health check
        security_opt:
            - no-new-privileges:true
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=proxy-network" # Explicitly state network

            # HTTPS Router for Keycloak
            - "traefik.http.routers.keycloak-secure.rule=Host(`${KC_HOSTNAME}`) && PathPrefix(`/auth`)"
            - "traefik.http.routers.keycloak-secure.entrypoints=websecure"
            - "traefik.http.routers.keycloak-secure.tls=true"
            - "traefik.http.routers.keycloak-secure.tls.certresolver=myresolver"
            - "traefik.http.routers.keycloak-secure.service=keycloak-svc"
            # Apply Keycloak's specific CSP and the existing redirect. Common security & compression are global.
            - "traefik.http.routers.keycloak-secure.middlewares=keycloak-csp-header@file,redirect-auth@docker"

            # Redirect trailing slash (existing middleware defined via labels)
            - "traefik.http.middlewares.redirect-auth.redirectregex.regex=^https://(.*)/auth$$"
            - "traefik.http.middlewares.redirect-auth.redirectregex.replacement=https://$${1}/auth/"
            - "traefik.http.middlewares.redirect-auth.redirectregex.permanent=true"

            # Service definition for Keycloak
            - "traefik.http.services.keycloak-svc.loadbalancer.server.port=8080" # Keycloak's internal HTTP port

    postgres:
        image: postgres:17-alpine
        container_name: postgres
        networks:
            - proxy-network
        volumes:
            - postgres_data:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: keycloak
            POSTGRES_USER: keycloak
            POSTGRES_PASSWORD: ${KC_DB_PASSWORD}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
            interval: 60s
            timeout: 5s
            retries: 10
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true

    keycloak-webhook-setup:
        build:
            context: ./setup
            dockerfile: Dockerfile
        container_name: keycloak-webhook-setup
        depends_on:
            keycloak:
                condition: service_healthy
        networks:
            - proxy-network
        environment:
            KEYCLOAK_BASE_URL: http://keycloak # Base hostname for Keycloak internal communication
            KEYCLOAK_REALM_NAME: ${KC_REALM_NAME:-jitsi}
            KEYCLOAK_ADMIN_USER: ${KC_ADMIN_USER:-temp-admin}
            KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
            TARGET_WEBHOOK_URL: ${KC_WEBHOOK_URL:-https://sonacove.com/api/keycloak-webhook}
            TARGET_WEBHOOK_SECRET: ${KC_WEBHOOK_SECRET}
            TARGET_WEBHOOK_EVENT_TYPES: ${KC_WEBHOOK_EVENT_TYPES:-UPDATE_PROFILE,VERIFY_EMAIL}
        restart: no

networks:
    proxy-network:
        external: true
        name: proxy-network # Ensure this matches the network name in compose.proxy.yml

volumes:
    postgres_data:
