---
interface Meeting {
  date: string;
  time: string;
  title: string;
  status: string;
}

interface Recording {
  date: string;
  duration: string;
  title: string;
}

interface Note {
  date: string;
  title: string;
  content: string;
}

interface Props {
  meetingsList: Meeting[];
  recordings: Recording[];
  notes: Note[];
}

const { meetingsList, recordings, notes } = Astro.props as Props;
---

<!-- Tab Container -->
<div data-tabs-container>
  <!-- Tab Buttons -->
  <div class="flex justify-around sm:justify-start sm:gap-8 mb-6 border-b border-gray-200">
    <!-- Meetings Button -->
    <button
      data-tab="meetings"
      class="tab-button flex flex-col items-center gap-1 pb-3 text-lg font-semibold text-orange-500 border-b-2 border-orange-500 flex-1"
    >
      <!-- Icon (mobile only) -->
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="w-6 h-6 sm:hidden"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0h18"
        />
      </svg>
      <span class="hidden sm:inline">My Meetings</span>
    </button>

    <!-- Recordings Button -->
    <button
      data-tab="recordings"
      class="tab-button flex flex-col items-center gap-1 pb-3 text-lg font-semibold text-gray-400 hover:text-orange-500 flex-1"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="w-6 h-6 sm:hidden"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M15.91 11.672a.375.375 0 010 .656l-5.603 3.113a.375.375 0 01-.557-.328V8.887c0-.286.307-.466.557-.327l5.603 3.112z"
        />
      </svg>
      <span class="hidden sm:inline">Recordings</span>
    </button>

    <!-- Notes Button -->
    <button
      data-tab="notes"
      class="tab-button flex flex-col items-center gap-1 pb-3 text-lg font-semibold text-gray-400 hover:text-orange-500 flex-1"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="w-6 h-6 sm:hidden"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10"
        />
      </svg>
      <span class="hidden sm:inline">Notes</span>
    </button>
  </div>

  <!-- Tab Content Panels -->
  <div>
    <!-- Meetings Panel -->
    <div data-content="meetings" class="tab-content">
      {meetingsList.length === 0 ? (
        <div class="text-center py-12">
          <p class="text-xl text-gray-500">You have no scheduled meetings.</p>
          <button class="mt-4 px-6 py-3 bg-orange-500 text-white font-semibold rounded-full hover:bg-orange-600">
            Book a Meeting
          </button>
        </div>
      ) : (
        <>
          <div class="inline-flex bg-gray-100 rounded-full p-1 space-x-1 mb-8">
            <button class="px-6 py-2 bg-white text-black font-semibold rounded-full shadow-sm text-sm transition-colors">
              All
            </button>
            <button class="px-6 py-2 text-gray-500 font-semibold hover:text-black rounded-full text-sm transition-colors">
              Upcoming
            </button>
            <button class="px-6 py-2 text-gray-500 font-semibold hover:text-black rounded-full text-sm transition-colors">
              Past
            </button>
          </div>
          <div class="space-y-6">
            {meetingsList.map((meeting) => (
              <div class="flex flex-col sm:flex-row sm:items-start sm:gap-24 pb-4 border-b border-gray-100 last:border-b-0">
                <div class="text-left text-gray-500 text-lg mb-3 sm:mb-0">
                  <p class="font-semibold">{meeting.date}</p>
                  <p>{meeting.time}</p>
                </div>
                <div class="text-left">
                  <p class="text-2xl font-bold text-black mb-2">{meeting.title}</p>
                  <span class="inline-flex items-center gap-2 bg-green-100 text-green-800 text-xs font-semibold px-3 py-1.5 rounded-full">
                    <svg class="w-4 h-4" viewBox="0 0 20 20" fill="currentColor">
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                      />
                    </svg>
                    {meeting.status}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </>
      )}
    </div>

    <!-- Recordings Panel -->
    <div data-content="recordings" class="tab-content hidden">
      {recordings.length === 0 ? (
        <div class="text-center py-12">
          <p class="text-xl text-gray-500">Recordings from your past meetings will appear here.</p>
        </div>
      ) : (
        <div data-sort-container>
          <div class="inline-flex bg-gray-100 rounded-full p-1 space-x-1 mb-8">
            <button
              data-sort-by="newest"
              class="sort-button px-6 py-2 bg-white text-black font-semibold rounded-full shadow-sm text-sm transition-colors"
            >
              Newest
            </button>
            <button
              data-sort-by="oldest"
              class="sort-button px-6 py-2 text-gray-500 font-semibold hover:text-black rounded-full text-sm transition-colors"
            >
              Oldest
            </button>
          </div>
          <div class="sortable-list space-y-6">
            {recordings.map((rec) => (
              <div
                class="sortable-item flex items-start justify-between pb-4 border-b border-gray-100 last:border-b-0"
                data-timestamp={new Date(rec.date).getTime()}
              >
                <div class="text-left text-gray-600 text-lg">
                  <p>{rec.date}</p>
                  <p class="text-sm">Duration: {rec.duration}</p>
                </div>
                <p class="text-2xl font-bold text-black text-right">{rec.title}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>

    <!-- Notes Panel -->
    <div data-content="notes" class="tab-content hidden">
      {notes.length === 0 ? (
        <div class="text-center py-12">
          <p class="text-xl text-gray-500">You don't have any notes yet.</p>
          <button class="mt-4 px-6 py-3 bg-orange-500 text-white font-semibold rounded-full hover:bg-orange-600">
            Create a Note
          </button>
        </div>
      ) : (
        <div data-sort-container>
          <div class="inline-flex bg-gray-100 rounded-full p-1 space-x-1 mb-8">
            <button
              data-sort-by="newest"
              class="sort-button px-6 py-2 bg-white text-black font-semibold rounded-full shadow-sm text-sm transition-colors"
            >
              Newest
            </button>
            <button
              data-sort-by="oldest"
              class="sort-button px-6 py-2 text-gray-500 font-semibold hover:text-black rounded-full text-sm transition-colors"
            >
              Oldest
            </button>
          </div>
          <div class="sortable-list space-y-4">
            {notes.map((note) => (
              <div
                class="sortable-item flex items-start justify-between gap-4 p-4 border rounded-xl hover:bg-gray-50 transition-colors"
                data-timestamp={new Date(note.date).getTime()}
              >
                <div class="flex-grow">
                  <p class="text-sm text-gray-500">{note.date}</p>
                  <h4 class="text-xl font-bold text-black mt-1">{note.title}</h4>
                  <p class="text-gray-600 mt-2 text-md leading-relaxed">
                    {note.content.substring(0, 120)}...
                  </p>
                </div>
                <div class="flex flex-col gap-2 flex-shrink-0">
                  <button class="px-4 py-2 text-sm font-semibold text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200">
                    View
                  </button>
                  <button class="px-4 py-2 text-sm font-semibold text-red-600 bg-red-50 rounded-lg hover:bg-red-100">
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>
</div>

<script>
  // --- Main Tab Logic ---
  const mainTabsContainer = document.querySelector("[data-tabs-container]");
  const tabButtons = mainTabsContainer.querySelectorAll(".tab-button");
  const tabContents = mainTabsContainer.querySelectorAll(".tab-content");

  tabButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const targetTab = button.dataset.tab;
      // Update button styles
      tabButtons.forEach((btn) => {
        btn.classList.remove("text-orange-500", "border-orange-500", "border-b-2");
        btn.classList.add("text-gray-400");
      });
      button.classList.add("text-orange-500", "border-orange-500", "border-b-2");
      button.classList.remove("text-gray-400");

      // Update content visibility
      tabContents.forEach((content) => {
        content.classList.toggle("hidden", content.dataset.content !== targetTab);
      });
    });
  });

  // --- Sub-Tab Sorting Logic ---
  const sortContainers = document.querySelectorAll("[data-sort-container]");

  sortContainers.forEach((container) => {
    const sortButtons = container.querySelectorAll(".sort-button");
    const sortableList = container.querySelector(".sortable-list");
    const items = Array.from(sortableList.querySelectorAll(".sortable-item"));

    sortButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const sortBy = button.dataset.sortBy;

        // Update button styles
        sortButtons.forEach((btn) => {
          btn.classList.remove("bg-white", "text-black", "shadow-sm");
          btn.classList.add("text-gray-500");
        });
        button.classList.add("bg-white", "text-black", "shadow-sm");
        button.classList.remove("text-gray-500");

        // Sort items
        const sortedItems = items.sort((a, b) => {
          const timeA = parseInt(a.dataset.timestamp, 10);
          const timeB = parseInt(b.dataset.timestamp, 10);
          return sortBy === "newest" ? timeB - timeA : timeA - timeB;
        });

        // Re-append items
        sortedItems.forEach(item => sortableList.appendChild(item));
      });
    });
  });
</script>
