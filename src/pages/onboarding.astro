---
import Layout from "../layouts/Layout.astro";

// Define the Keycloak auth URL and parameters
const keycloakBaseUrl = "https://auth.sonacove.com/realms/jitsi/protocol/openid-connect/auth";
const clientId = "jitsi-web";
const responseType = "token";

// Base URL for redirect - this will be replaced client-side
const redirectUri = "/onboarding/callback";

// Simple URL without dynamic parameters
const keycloakAuthUrl = `${keycloakBaseUrl}?client_id=${clientId}&response_type=${responseType}`;

---

<Layout title="Onboarding - Sonacove Meets">
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-md mx-auto bg-white rounded-xl shadow-lg overflow-hidden p-8">
      <h1 class="text-2xl font-bold text-center mb-6">Welcome to Sonacove Meets</h1>

      <div id="initial-content">
        <p class="text-gray-600 mb-6 text-center">
          To get started, please create an account or sign in.
        </p>
        <div class="flex justify-center">
          <a 
            href={keycloakAuthUrl}
            class="px-6 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white font-medium rounded-lg hover:opacity-90 transition-all transform hover:scale-[1.02]"
          >
            Sign in with Keycloak
          </a>
        </div>
      </div>

      <div id="authenticated-content" style="display: none;" class="text-center">
        <div class="mb-6">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-green-500 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h2 class="text-xl font-semibold mt-4">Authentication Successful!</h2>
          <p class="text-gray-600 mt-2">You're now signed in to Sonacove Meets.</p>
        </div>
        
        <p class="text-gray-600 mb-6">
          Complete your subscription to get started with Sonacove Meets.
        </p>
        
        <!-- Paddle checkout container -->
        <div class="paddle-checkout-container mt-6">
          <div class="animate-pulse">
            <div class="h-10 bg-gray-200 rounded w-full mb-4"></div>
            <div class="h-10 bg-gray-200 rounded w-full mb-4"></div>
            <div class="h-10 bg-gray-200 rounded w-full"></div>
          </div>
        </div>

        <!-- Skip payment option -->
        <div class="mt-6 text-center">
          <button 
            id="skip-payment"
            class="text-sm text-gray-500 hover:text-gray-700 underline"
          >
            Skip payment for now
          </button>
          <p class="text-xs text-gray-400 mt-1">
            You can complete your subscription later, but some features will be limited.
          </p>
        </div>
      </div>
      
      <div id="error-content" style="display: none;" class="text-center">
        <div class="mb-6">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-red-500 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h2 class="text-xl font-semibold mt-4">Authentication Failed</h2>
          <p id="error-message" class="text-gray-600 mt-2">
            We couldn't verify your authentication. Please try again.
          </p>
        </div>
        
        <div class="mt-6">
          <a 
            href={keycloakAuthUrl}
            class="px-6 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white font-medium rounded-lg hover:opacity-90 transition-all transform hover:scale-[1.02]"
          >
            Try Again
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import type { Paddle } from '@paddle/paddle-js';
  import { initializePaddle } from '@paddle/paddle-js';
  import { validateKeycloakToken, parseUserFromToken } from "../utils/auth";

  // Storage key constants
  const STORAGE_KEYS = {
    AUTH_TOKEN: 'sonacove_auth_token',
    USER_INFO: 'sonacove_user_info',
    SUBSCRIPTION_STATUS: 'sonacove_subscription_status'
  };

  async function initializePaddleCheckout() {
    console.log('Paddle Environment:', import.meta.env.PUBLIC_PADDLE_ENVIRONMENT);
    console.log('Paddle Client Token exists:', !!import.meta.env.PUBLIC_PADDLE_CLIENT_TOKEN);

    const environment = import.meta.env.PUBLIC_PADDLE_ENVIRONMENT || 'sandbox';
    const clientToken = import.meta.env.PUBLIC_PADDLE_CLIENT_TOKEN;

    if (!clientToken) {
      throw new Error('Paddle client token is not configured');
    }

    return await initializePaddle({
      environment,
      token: clientToken
    });
  }

  async function setupPaddleCheckout(accessToken: string, userInfo: any) {
    try {
      const container = document.querySelector('.paddle-checkout-container');
      
      if (!container) {
        throw new Error('Paddle checkout container not found');
      }

      // Clear the loading animation
      container.innerHTML = '<div style="min-height: 400px;"></div>';

      const paddle = await initializePaddle({
        environment: import.meta.env.PUBLIC_PADDLE_ENVIRONMENT || 'sandbox',
        token: import.meta.env.PUBLIC_PADDLE_CLIENT_TOKEN
      }).catch(error => {
        throw error;
      });

      if (!paddle) {
        throw new Error('Failed to initialize Paddle');
      }

      const checkoutConfig: Parameters<typeof paddle.Checkout.open>[0] = {
        items: [{
          priceId: import.meta.env.PUBLIC_PADDLE_PRICE_ID,
          quantity: 1
        }],
        settings: {
          displayMode: 'overlay',
        //   theme: 'light',
        //   locale: 'en',
          frameTarget: 'paddle-checkout-container',
        //   frameInitialHeight: 450,
          frameStyle: 'width: 100%; min-height: 400px; background-color: transparent; border: none;',
          successUrl: `${window.location.origin}/onboarding/success?token=${encodeURIComponent(accessToken)}`,
        },
        ...(userInfo?.email ? { customer: { email: userInfo.email } } : {})
      };

      await paddle.Checkout.open(checkoutConfig);

    } catch (error) {
      const container = document.querySelector('.paddle-checkout-container');
      if (container) {
        container.innerHTML = `
          <div class="text-red-600 p-4 border border-red-200 rounded-lg">
            <p>Failed to load payment form.</p>
            <p class="text-sm mt-2">Error details:</p>
            <pre class="text-xs mt-1 p-2 bg-red-50 rounded">${
              error instanceof Error 
                ? `${error.message}\n${error.stack}` 
                : JSON.stringify(error, null, 2)
            }</pre>
          </div>
        `;
      }
    }
  }

  function setupSkipPayment(accessToken: string) {
    const skipButton = document.getElementById('skip-payment');
    if (skipButton) {
      skipButton.addEventListener('click', () => {
        localStorage.setItem(STORAGE_KEYS.SUBSCRIPTION_STATUS, 'pending');
        window.location.href = `${window.location.origin}/onboarding/success?token=${encodeURIComponent(accessToken)}&skipped=true`;
      });
    }
  }

  async function init() {
    // Construct proper redirect URI using window.location
    const redirectUri = new URL("/onboarding/callback", window.location.origin).toString();
    const keycloakBaseUrl = "https://auth.sonacove.com/realms/jitsi/protocol/openid-connect/auth";
    const clientId = "jitsi-web";
    const responseType = "token";
    
    const keycloakAuthUrl = `${keycloakBaseUrl}?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=${responseType}`;

    // Update all auth URL links in the page
    document.querySelectorAll('a[href*="auth.sonacove.com"]').forEach(link => {
      link.setAttribute('href', keycloakAuthUrl);
    });

    // Extract token from URL if present
    let accessToken: string | null = null;
    if (window.location.hash) {
      const fragmentParams = new URLSearchParams(window.location.hash.substring(1));
      accessToken = fragmentParams.get("access_token");
    }

    const initialContent = document.getElementById('initial-content');
    const authenticatedContent = document.getElementById('authenticated-content');
    const errorContent = document.getElementById('error-content');

    // Handle auto-login
    const urlParams = new URLSearchParams(window.location.search);
    const shouldAutoLogin = urlParams.get('auto_login') === 'true';
    const hasToken = window.location.hash && window.location.hash.includes("access_token=");

    if (shouldAutoLogin && !hasToken) {
      window.location.href = keycloakAuthUrl;
      return;
    }

    // If we have a token, validate it
    if (accessToken) {
      try {
        const isAuthenticated = await validateKeycloakToken(accessToken);
        
        if (isAuthenticated) {
          // Store token and user info
          const userInfo = parseUserFromToken(accessToken);
          if (userInfo) {
            localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, accessToken);
            localStorage.setItem(STORAGE_KEYS.USER_INFO, JSON.stringify(userInfo));
          }

          if (initialContent) initialContent.style.display = 'none';
          if (authenticatedContent) authenticatedContent.style.removeProperty('display');
          
          // Set up skip payment button regardless of Paddle status
          setupSkipPayment(accessToken);
          
          // Set up Paddle checkout
          await setupPaddleCheckout(accessToken, userInfo);
        } else {
          if (initialContent) initialContent.style.display = 'none';
          if (errorContent) errorContent.style.removeProperty('display');
        }
      } catch (error) {
        console.error("Error validating token:", error);
        if (initialContent) initialContent.style.display = 'none';
        if (errorContent) {
          errorContent.style.removeProperty('display');
          const errorMessage = document.getElementById('error-message');
          if (errorMessage) {
            errorMessage.textContent = error instanceof Error ? error.message : 'An unknown error occurred';
          }
        }
      }
    } else {
      // Check if we have stored credentials
      const storedToken = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);
      const storedUserInfo = localStorage.getItem(STORAGE_KEYS.USER_INFO);
      
      if (storedToken && storedUserInfo) {
        try {
          const isValid = await validateKeycloakToken(storedToken);
          if (isValid) {
            window.location.href = 'https://meet.sonacove.com';
            return;
          }
        } catch (error) {
          // Token invalid, clear storage
          localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);
          localStorage.removeItem(STORAGE_KEYS.USER_INFO);
        }
      }
      
      if (initialContent) initialContent.style.removeProperty('display');
    }
  }

  // Add a global error handler to catch any unhandled errors
  window.addEventListener('error', (event) => {
    console.error('Global error caught:', {
      message: event.message,
      filename: event.filename,
      lineno: event.lineno,
      colno: event.colno,
      error: event.error
    });
  });

  // Add a global promise rejection handler
  window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', {
      reason: event.reason,
      promise: event.promise
    });
  });

  init();
</script>