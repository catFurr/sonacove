---
// @ts-expect-error
import { generateRoomWithoutSeparator } from "@jitsi/js-utils/random";

import Layout from "../layouts/Layout.astro";
import TabbedContent from "../components/TabbedContent.astro";
import WelcomeContent from "../components/WelcomeContent.astro";

const meetingsList = [
  {
    date: "August 25, 2025",
    title: "Design Workshop with Ibrahim",
    time: "8:20 PM",
    status: "Upcoming",
  },
  {
    date: "August 25, 2025",
    title: "Design Workshop with Ibrahim",
    time: "8:20 PM",
    status: "Upcoming",
  },
  {
    date: "August 26, 2025",
    title: "Project Sync-Up",
    time: "10:00 AM",
    status: "Upcoming",
  },
  {
    date: "August 27, 2025",
    title: "Marketing Brainstorm",
    time: "3:30 PM",
    status: "Upcoming",
  },
];

const recordings = [
  {
    title: "Design Workshop with Ibrahim",
    date: "August 20, 2025",
    duration: "1h 15m",
  },
  {
    title: "Project Sync-Up",
    date: "August 18, 2025",
    duration: "45m",
  },
  {
    title: "Marketing Brainstorm",
    date: "August 15, 2025",
    duration: "30m",
  },
];

const notes = [
  {
    title: "Follow-up: Q3 Roadmap",
    date: "August 25, 2025",
    content:
      "Key takeaways from the design workshop. Ibrahim mentioned we need to focus on the new user onboarding flow and simplify the dashboard...",
  },
  {
    title: "Ideas from Marketing Sync",
    date: "August 22, 2025",
    content:
      "We discussed potential new ad campaigns. The 'Teach Anything' angle seems promising. Need to mock up some visuals for next week's review.",
  },
  {
    title: "Client Onboarding Feedback",
    date: "August 20, 2025",
    content:
      "The client found the initial setup process a bit confusing. We should consider adding an interactive checklist or a setup wizard.",
  },
];

const placeholderWords = Array.from({ length: 10 }, () =>
  generateRoomWithoutSeparator()
);
const initialRoomPlaceholder = placeholderWords[0];

const env = {
  PUBLIC_KC_HOSTNAME: import.meta.env.PUBLIC_KC_HOSTNAME,
  PUBLIC_PADDLE_ENVIRONMENT: import.meta.env.PUBLIC_PADDLE_ENVIRONMENT,
  PUBLIC_PADDLE_CLIENT_TOKEN: import.meta.env.PUBLIC_PADDLE_CLIENT_TOKEN,
  PUBLIC_PADDLE_PRICE_ID: import.meta.env.PUBLIC_PADDLE_PRICE_ID,
};
---

<Layout title="Sonacove Meets">
  <div class="bg-gradient-to-b from-[#F3F3F3] to-[#FAFAFA] min-h-screen p-4 overflow-x-hidden">
    <div class="w-full max-w-[1700px] mx-auto px-8">
      
      <!-- SHARED HEADER -->
      <div class="w-full flex justify-center pt-4 mb-4 lg:mb-8">
        <header
          class="w-full flex justify-between items-center px-4 py-3 lg:px-6 lg:py-3 lg:rounded-full border-b lg:border border-gray-200 lg:shadow-sm"
        >
          <!-- Logo -->
          <div class="flex items-center gap-4">
            <img
              src="/sonacove-orange.svg"
              alt="Sonacove Logo"
              class="w-8 h-7 lg:w-10 lg:h-8"
            />
            <span class="text-xl lg:text-2xl font-semibold text-black">
              Sonacove
            </span>
          </div>

          <!-- LOGGED IN HEADER -->
          <div class="logged-in-ui flex gap-4">
            <button
              id="logout-btn"
              class="px-7 py-3 bg-black text-white font-semibold rounded-full hover:bg-gray-800 transition-colors"
            >
              Log Out
            </button>

            <!-- Hamburger (Mobile) -->
            <button class="sm:hidden p-2">
              <svg
                width="25"
                height="25"
                viewBox="0 0 25 25"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M14.0713 17.8027C14.8976 17.8029 15.5672 18.4725 15.5674 19.2988C15.5674 20.1253 14.8977 20.7957 14.0713 20.7959H4.09375C3.26749 20.7956 2.59766 20.1252 2.59766 19.2988C2.5978 18.4726 3.26758 17.803 4.09375 17.8027H14.0713ZM20.0576 10.8193C20.8839 10.8196 21.5536 11.4892 21.5537 12.3154C21.5535 13.1416 20.8838 13.8123 20.0576 13.8125H4.09375C3.26765 13.8122 2.59791 13.1415 2.59766 12.3154C2.59778 11.4892 3.26757 10.8196 4.09375 10.8193H20.0576ZM20.0576 3.83496C20.8839 3.83512 21.5536 4.50474 21.5537 5.33105C21.5537 6.15748 20.884 6.82796 20.0576 6.82812H10.0801C9.25376 6.82788 8.58399 6.15743 8.58398 5.33105C8.58411 4.50479 9.25384 3.8352 10.0801 3.83496H20.0576Z"
                  fill="black"
                />
              </svg>
            </button>

            <!-- Avatar (Desktop) -->
            <div class="hidden sm:flex items-center">
              <img
                alt="User Avatar"
                class="user-avatar w-10 h-10 rounded-full object-cover"
              />
            </div>
          </div>

          <!-- LOGGED OUT HEADER -->
          <div class="logged-out-ui hidden">
            <!-- Hamburger (Mobile) -->
            <button class="lg:hidden p-2">
              <svg
                width="25"
                height="25"
                viewBox="0 0 25 25"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M14.0713 17.8027C14.8976 17.8029 15.5672 18.4725 15.5674 19.2988C15.5674 20.1253 14.8977 20.7957 14.0713 20.7959H4.09375C3.26749 20.7956 2.59766 20.1252 2.59766 19.2988C2.5978 18.4726 3.26758 17.803 4.09375 17.8027H14.0713ZM20.0576 10.8193C20.8839 10.8196 21.5536 11.4892 21.5537 12.3154C21.5535 13.1416 20.8838 13.8123 20.0576 13.8125H4.09375C3.26765 13.8122 2.59791 13.1415 2.59766 12.3154C2.59778 11.4892 3.26757 10.8196 4.09375 10.8193H20.0576ZM20.0576 3.83496C20.8839 3.83512 21.5536 4.50474 21.5537 5.33105C21.5537 6.15748 20.884 6.82796 20.0576 6.82812H10.0801C9.25376 6.82788 8.58399 6.15743 8.58398 5.33105C8.58411 4.50479 9.25384 3.8352 10.0801 3.83496H20.0576Z"
                  fill="black"
                />
              </svg>
            </button>

            <!-- Auth Buttons (Desktop) -->
            <div class="hidden lg:flex items-center gap-4">
              <button
                id="login-btn"
                class="px-7 py-3 bg-black text-white font-semibold rounded-full hover:bg-gray-800 transition-colors"
              >
                Log in
              </button>
              <button
                id="signup-btn"
                class="px-7 py-3 bg-orange-500 text-white font-semibold rounded-full hover:bg-orange-600 transition-colors"
              >
                Sign up
              </button>
            </div>
          </div>
        </header>
      </div>

      <!-- LOGGED IN MAIN -->
      <main
        class="logged-in-ui grid grid-cols-1 lg:grid-cols-5 gap-16 lg:gap-[5vw] items-start pt-4 lg:pt-8 mt-4"
      >
        <div class="lg:col-span-2">
          <WelcomeContent {initialRoomPlaceholder} />
        </div>

        <!-- Right Column (Logged In) -->
        <div class="bg-white rounded-3xl p-6 border border-gray-200 shadow-sm lg:col-span-3">
          <div class="flex flex-col sm:flex-row sm:items-start gap-6 mb-8">
            <!-- Avatar -->
            <img
              alt="User Avatar"
              class="user-avatar w-20 h-20 rounded-full object-cover mx-auto sm:mx-0"
            />

            <!-- User Info -->
            <div class="flex-1 text-center sm:text-left flex flex-col justify-center">
              <h3 class="text-3xl font-bold text-black" id="user-name">
                Username
              </h3>
              <p class="text-gray-500 text-lg" id="user-email">user@example.com</p>
              <p class="text-gray-500 text-lg mt-2">
                Plan:
                <span class="font-bold text-black" id="user-plan">Active</span>
              </p>
            </div>

            <!-- Buttons -->
            <div class="flex flex-col gap-2 mt-4 sm:mt-0 sm:ml-4 items-center sm:items-end">
              <button class="px-7 py-3 border border-orange-500 text-orange-500 text-sm font-semibold rounded-full hover:bg-orange-50 w-full">
                Manage Account
              </button>
              <button class="px-7 py-3 border border-black text-black text-sm font-semibold rounded-full hover:bg-gray-100 w-full">
                Manage Plan
              </button>
            </div>
          </div>
          <TabbedContent {meetingsList} {recordings} {notes} />
        </div>
      </main>

      <!-- LOGGED OUT MAIN -->
      <main
        class="logged-out-ui hidden grid grid-cols-1 lg:grid-cols-2 gap-[5vw] items-center pt-8 mt-4"
      >
        <div>
          <WelcomeContent {initialRoomPlaceholder} />
        </div>
        <div class="flex justify-center items-center w-auto h-full mt-12 lg:mt-0">
          <img
            src="/logged-out-illustration.png"
            alt="Illustration of a person in an online meeting with files and folders"
            class="max-w-full max-h-full object-contain"
          />
        </div>
      </main>
    </div>
  </div>

  <!-- Animation Script -->
  <script type="module" is:inline define:vars={{ placeholderWords }}>
    const input = document.getElementById("room-input");
    let currentWord;

    if (input) {
      let wordIndex = 0;
      let timeoutId = null;
      const typingSpeed = 100,
        erasingSpeed = 50,
        pauseDuration = 1500;

      const type = (word, onDone) => {
        let i = 0;
        if (document.activeElement !== input) input.placeholder = "";
        const typeChar = () => {
          if (i < word.length) {
            input.placeholder += word.charAt(i++);
            timeoutId = setTimeout(typeChar, typingSpeed);
          } else if (onDone) onDone();
        };
        typeChar();
      };

      const erase = (onDone) => {
        const word = input.placeholder;
        let i = word.length;
        const eraseChar = () => {
          if (i > 0) {
            input.placeholder = word.substring(0, --i);
            timeoutId = setTimeout(eraseChar, erasingSpeed);
          } else if (onDone) onDone();
        };
        eraseChar();
      };

      const animationLoop = () => {
        currentWord = placeholderWords[wordIndex];
        type(currentWord, () => {
          timeoutId = setTimeout(() => {
            erase(() => {
              wordIndex = (wordIndex + 1) % placeholderWords.length;
              animationLoop();
            });
          }, pauseDuration);
        });
      };

      window.addEventListener("DOMContentLoaded", animationLoop);
    }

    const roomForm = document.getElementById("room-form");
    if (roomForm) {
      roomForm.addEventListener("submit", (event) => {
        event.preventDefault();
        if (currentWord) window.location.href = `/meet/${currentWord}`;
      });
    }
  </script>

  <script>
    import { setupAuthButtons } from "../utils/oidc-client";
    setupAuthButtons();
  </script>

  <script>
    import { updateLoginUI } from "../utils/user-ui";
    updateLoginUI();
  </script>

  <!-- Custom Styles -->
  <style>
    .bg-orange-500 {
      background-color: #f05023;
    }
    .hover\:bg-orange-600:hover {
      background-color: #d8431c;
    }
    .text-orange-500 {
      color: #f05023;
    }
    .text-orange-600 {
      color: #d9480f;
    }
    .border-orange-500 {
      border-color: #f05023;
    }
    .bg-orange-100 {
      background-color: #fff4e6;
    }
    .hover\:bg-orange-50:hover {
      background-color: #fff9f2;
    }
    .focus\:ring-orange-400:focus {
      --tw-ring-color: #f05023;
    }
    .text-green-600 {
      color: #16a34a;
    }
    .bg-gray-50 {
      background-color: #f9fafb;
    }
  </style>
</Layout>
