---
// @ts-expect-error
import { generateRoomWithoutSeparator } from '@jitsi/js-utils/random';
import Layout from "../layouts/Layout.astro";

const meetingsList = [
    { date: "Aug 18, 2025", room: "er", time: "12:34 PM", duration: "00:00" },
    { date: "Aug 17, 2025", room: "zaidahmed", time: "7:06 PM", duration: "20:15" },
    { date: "Aug 12, 2025", room: "test", time: "3:25 PM", duration: "36:50" },
    { date: "Aug 7, 2025", room: "meet", time: "12:26 PM", duration: "06:33" },
    { date: "Aug 1, 2025", room: "sonacove", time: "9:15 AM", duration: "01:45" },
    { date: "Jul 30, 2025", room: "jitsi-meet", time: "11:00 AM", duration: "02:30" },
    { date: "Jul 25, 2025", room: "test-room", time: "4:20 PM", duration: "15:00" },
    { date: "Jul 20, 2025", room: "demo-room", time: "10:10 AM", duration: "30:00" },
];

const placeholderWords = Array.from({ length: 10 }, () => generateRoomWithoutSeparator());
const initialRoomPlaceholder = placeholderWords[0];

const env = {
    PUBLIC_KC_HOSTNAME: import.meta.env.PUBLIC_KC_HOSTNAME,
    PUBLIC_PADDLE_ENVIRONMENT: import.meta.env.PUBLIC_PADDLE_ENVIRONMENT,
    PUBLIC_PADDLE_CLIENT_TOKEN: import.meta.env.PUBLIC_PADDLE_CLIENT_TOKEN,
    PUBLIC_PADDLE_PRICE_ID: import.meta.env.PUBLIC_PADDLE_PRICE_ID
};
---

<Layout title="Sonacove Meets">
    <div class="container px-4 py-12">
        <div class="rounded-xl overflow-hidden p-8">
            <h1 class="text-3xl font-bold text-center mb-2">Sonacove Meets</h1>
            <p class="text-center text-lg text-gray-600 mb-6">Secure and high quality meetings</p>

            <form id="room-form" class="max-w-xl mx-auto flex flex-col sm:flex-row gap-3 justify-center mb-8">
                <input id="room-input" type="text" placeholder={initialRoomPlaceholder} class="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500" />
                <button type="submit" class="text-center px-6 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white font-medium rounded-lg hover:opacity-90 transition-all transform hover:scale-[1.02] whitespace-nowrap">Start meeting</button>
            </form>

            <script is:inline define:vars={{ placeholderWords }}>
                const input = document.getElementById('room-input');
                let currentWord;
                if (input) {
                    let wordIndex = 0;
                    let timeoutId = null;
                    const typingSpeed = 100;
                    const erasingSpeed = 50;
                    const pauseDuration = 1500;

                    const type = (word, onDone) => {
                        let i = 0;
                        if (document.activeElement !== input) input.placeholder = '';
                        const typeChar = () => {
                            if (i < word.length) {
                                input.placeholder += word.charAt(i++);
                                timeoutId = setTimeout(typeChar, typingSpeed);
                            } else if (onDone) onDone();
                        };
                        typeChar();
                    };

                    const erase = (onDone) => {
                        const word = input.placeholder;
                        let i = word.length;
                        const eraseChar = () => {
                            if (i > 0) {
                                input.placeholder = word.substring(0, --i);
                                timeoutId = setTimeout(eraseChar, erasingSpeed);
                            } else if (onDone) onDone();
                        };
                        eraseChar();
                    };

                    const animationLoop = () => {
                        currentWord = placeholderWords[wordIndex];
                        type(currentWord, () => {
                            timeoutId = setTimeout(() => {
                                erase(() => {
                                    wordIndex = (wordIndex + 1) % placeholderWords.length;
                                    animationLoop();
                                });
                            }, pauseDuration);
                        });
                    };
                    window.addEventListener('DOMContentLoaded', animationLoop);
                }

                const roomForm = document.getElementById('room-form');
                if (roomForm) {
                    roomForm.addEventListener('submit', (event) => {
                        event.preventDefault();
                        if (currentWord) window.location.href = `/meet/${currentWord}`;
                    });
                }
            </script>

            <div class="max-w-2xl mx-auto bg-gray-50 rounded-lg p-4 mb-8 shadow-sm">
                <h2 class="text-lg font-semibold mb-2 px-2">Recent Meetings</h2>
                {meetingsList.length === 0 ? (
                    <div class="flex items-center justify-center min-h-[220px] bg-blue-100 rounded-lg">
                        <p class="text-center text-gray-700 px-4 py-8">
                            Your recent meetings will appear here.
                        </p>
                    </div>
                ) : (
                    <ul class="max-h-72 overflow-y-auto space-y-3 p-1">
                        {meetingsList.map((meeting) => (
                            <li class="flex items-center gap-4 p-3 bg-white rounded-lg border border-gray-200 shadow-sm">
                                <div class="flex flex-col w-32 shrink-0">
                                    <span class="text-sm font-medium text-gray-800">{meeting.date}</span>
                                    <span class="text-sm text-gray-500">{meeting.time}</span>
                                </div>
                                <div class="flex flex-col min-w-0">
                                    <span class="text-sm font-semibold text-gray-900 truncate">{meeting.room}</span>
                                    <span class="text-sm text-gray-500">{meeting.duration}</span>
                                </div>
                            </li>
                        ))}
                    </ul>
                )}
            </div>

            <div class="max-w-2xl mx-auto mt-8">
                <!-- <h2 class="text-xl font-bold mb-4">Account</h2> -->
                <div id="auth-flow-container" class="bg-gray-50 rounded-lg p-6 shadow-sm min-h-[200px] flex items-center justify-center">
                    <div id="loading-view">
                        <p class="text-gray-500">Loading account details...</p>
                    </div>

                    <div id="initial-view" class="hidden text-center w-full">
                        <!-- <h3 class="text-lg font-semibold mb-2">Login</h3> -->
                        <p class="text-gray-900 mb-6">Log in to access your account and meetings.</p>
                        <button id="login-btn" class="px-6 py-3 text-center bg-gradient-to-r from-primary-600 to-accent-600 text-white font-medium rounded-lg hover:opacity-90 transition-all transform hover:scale-[1.02]">
                            Login
                        </button>
                    </div>

                    <div id="success-view" class="hidden w-full">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold">Account Details</h3>
                            <div class="flex items-center gap-2">
                                <button id="refresh-btn" class="hidden p-1 pr-2 text-gray-600 hover:text-blue-600" title="Refresh Session">
                                    <svg fill="none" height="20" viewBox="0 0 24 24" width="20" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5">
                                        <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" />
                                        <path d="M21 3v5h-5" />
                                        <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" />
                                        <path d="M8 16H3v5" />
                                    </svg>
                                </button>
                                <button id="logout-btn" class="px-5 py-2 bg-red-500 text-white text-sm rounded-lg font-semibold hover:bg-red-600 transition">Logout</button>
                            </div>
                        </div>
                        <div class="grid grid-cols-2 gap-x-4 gap-y-2 mb-6">
                            <p class="font-semibold">Name:</p><p id="user-name">...</p>
                            <p class="font-semibold">Email:</p><p id="user-email">...</p>
                            <p class="font-semibold">Subscription:</p><p id="user-status">...</p>
                        </div>
                        <div class="flex flex-wrap gap-4">
                            <a id="manage-account-btn" target="_blank" rel="noopener noreferrer" class="flex-1 text-center px-6 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition">Manage Account</a>
                            <a id="manage-subscription-btn" target="_blank" rel="noopener noreferrer" class="flex-1 text-center px-6 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition">Manage Subscription</a>
                        </div>
                    </div>

                    <div id="error-view" class="hidden text-center">
                        <h3 class="text-xl font-semibold text-red-600 mb-2">Something went wrong</h3>
                        <p id="error-message" class="text-gray-600 mb-4">...</p>
                        <button id="retry-btn" class="px-6 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white font-medium rounded-lg hover:opacity-90">
                            Try Again
                        </button>
                    </div>
                </div>
            </div>

            <script is:inline define:vars={{ env }}>
                const views = {
                    loading: document.getElementById('loading-view'),
                    initial: document.getElementById('initial-view'),
                    success: document.getElementById('success-view'),
                    error: document.getElementById('error-view')
                };
                const userElements = {
                    name: document.getElementById('user-name'),
                    email: document.getElementById('user-email'),
                    status: document.getElementById('user-status'),
                };
                const buttons = {
                    login: document.getElementById('login-btn'),
                    retry: document.getElementById('retry-btn'),
                    logout: document.getElementById('logout-btn'),
                    refresh: document.getElementById('refresh-btn'),
                    manageAccount: document.getElementById('manage-account-btn'),
                    manageSubscription: document.getElementById('manage-subscription-btn')
                };
                const errorMessageEl = document.getElementById('error-message');

                const state = {
                    currentView: 'loading',
                    userInfo: null,
                    isExpired: false
                };

                const STORAGE_KEYS = {
                  AUTH_TOKEN: "sonacove_auth_token",
                  USER_INFO: "sonacove_user_info",
                  SUBSCRIPTION_STATUS: "sonacove_subscription_status",
                };

                function parseJwtPayload(token) {
                    try {
                        const base64Url = token.split('.')[1];
                        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                        return JSON.parse(jsonPayload);
                    } catch (e) {
                        return null;
                    }
                }

                function getLoginUrl() {
                    const redirectUri = new URL(window.location.href.split('#')[0]);
                    const keycloakBaseUrl = `https://${env.PUBLIC_KC_HOSTNAME}/realms/jitsi/protocol/openid-connect`;
                    return `${keycloakBaseUrl}/auth?client_id=jitsi-web&redirect_uri=${encodeURIComponent(redirectUri.toString())}&response_mode=fragment&response_type=token&scope=openid%20profile%20email`;
                }

                async function updateSubscriptionUrl() {
                    const subStatus = localStorage.getItem(STORAGE_KEYS.SUBSCRIPTION_STATUS);
                    const token = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);
                    const defaultUrl = new URL('/onboarding', window.location.origin).toString();
                    
                    buttons.manageSubscription.href = `${defaultUrl}#access_token=${token}`;

                    if (subStatus === 'active' && token) {
                        try {
                            const response = await fetch(`${window.location.origin}/api/paddle-customer-portal`, {
                                headers: { 'Authorization': `Bearer ${token}` }
                            });
                            if (!response.ok) throw new Error('Failed to fetch portal URL');
                            const data = await response.json();
                            if (data.url) {
                                buttons.manageSubscription.href = data.url;
                            }
                        } catch (error) {
                            console.error('Error fetching subscription URL:', error);
                        }
                    }
                }

                function render() {
                    Object.values(views).forEach(v => { v.style.display = 'none'; });
                    if (views[state.currentView]) {
                        views[state.currentView].style.display = 'block';
                    }

                    if (state.currentView === 'success') {
                        if (state.userInfo) {
                            userElements.name.textContent = state.userInfo.name || 'N/A';
                            userElements.email.textContent = state.userInfo.email || 'N/A';
                            userElements.status.textContent = state.userInfo.subscriptionStatus === 'active'
                                ? 'Active'
                                : state.userInfo.subscriptionStatus || 'pending';
                        }
                        buttons.refresh.style.display = state.isExpired ? 'block' : 'none';

                        if (state.isExpired) {
                            buttons.manageSubscription.classList.add('opacity-50', 'cursor-not-allowed');
                            buttons.manageSubscription.setAttribute('aria-disabled', 'true');
                        } else {
                            buttons.manageSubscription.classList.remove('opacity-50', 'cursor-not-allowed');
                            buttons.manageSubscription.removeAttribute('aria-disabled');
                        }
                    }
                }
                
                async function init() {
                    try {
                        const cleanUrl = `${window.location.pathname}${window.location.search}`;
                        const hashParams = new URLSearchParams(window.location.hash.slice(1));

                        if (hashParams.get('loggedOut') === 'true') {
                            localStorage.clear();
                            window.history.replaceState({}, '', cleanUrl);
                        }

                        const tokenFromHash = hashParams.get("access_token");
                        if (tokenFromHash) {
                            localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, tokenFromHash);
                            window.history.replaceState({}, '', cleanUrl);
                        }
                        
                        const token = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);
                        if (!token) {
                            state.currentView = 'initial';
                            return;
                        }

                        const payload = parseJwtPayload(token);
                        if (!payload) {
                            localStorage.clear();
                            state.currentView = 'initial';
                            return;
                        }
                        
                        const exp = payload.exp;
                        const currentTime = Math.floor(Date.now() / 1000);
                        const msUntilExpiry = (exp - currentTime) * 1000;

                        if (msUntilExpiry <= 0) {
                            state.isExpired = true;
                        } else {
                            setTimeout(() => {
                                state.isExpired = true;
                                render();
                            }, msUntilExpiry);
                        }
                        
                        const contextUser = payload.context?.user;
                        state.userInfo = {
                            name: contextUser?.name || payload.name,
                            email: contextUser?.email || payload.email,
                            subscriptionStatus: contextUser?.subscription_status || 'pending'
                        };
                        localStorage.setItem(STORAGE_KEYS.USER_INFO, JSON.stringify(state.userInfo));
                        localStorage.setItem(STORAGE_KEYS.SUBSCRIPTION_STATUS, state.userInfo.subscriptionStatus);
                        
                        state.currentView = 'success';
                        await updateSubscriptionUrl();

                    } catch (error) {
                        state.currentView = 'error';
                        errorMessageEl.textContent = error.message || 'An unexpected error occurred.';
                        console.error("Initialization failed:", error);
                    } finally {
                        render();
                    }
                }
                
                function handleLogin() {
                    window.location.href = getLoginUrl();
                }
                
                function handleLogout() {
                    localStorage.clear();
                    const postLogoutRedirectUri = `${window.location.origin}/meet/#loggedOut=true`;
                    const logoutUrl = `https://${env.PUBLIC_KC_HOSTNAME}/realms/jitsi/protocol/openid-connect/logout?post_logout_redirect_uri=${encodeURIComponent(postLogoutRedirectUri)}&client_id=jitsi-web`;
                    window.location.href = logoutUrl;
                }
                
                buttons.login.addEventListener('click', handleLogin);
                buttons.retry.addEventListener('click', handleLogin);
                buttons.refresh.addEventListener('click', handleLogin);
                buttons.logout.addEventListener('click', handleLogout);
                
                buttons.manageAccount.href = `https://${env.PUBLIC_KC_HOSTNAME}/realms/jitsi/account`;
                buttons.manageSubscription.addEventListener('click', (e) => {
                    if (state.isExpired) {
                        e.preventDefault();
                        alert("Your session has expired. Please refresh the session to manage your subscription.");
                    }
                });

                document.addEventListener('DOMContentLoaded', init);
            </script>
        </div>
    </div>
</Layout>
