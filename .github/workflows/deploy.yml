name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy:
    name: Cloudflare
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'preview' }}
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Astro build
        uses: actions/cache@v4
        with:
          path: |
            dist/
            .astro/
          key: ${{ runner.os }}-astro-${{ hashFiles('src/**', 'astro.config.ts', 'tailwind.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-astro-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Set environment values
        run: |
          # Filter out null and empty values
          FILTERED_SECRETS=$(echo "$ALL_SECRETS" | jq 'with_entries(select(.value != null and .value != ""))')
          FILTERED_VARS=$(echo "$ALL_VARIABLES" | jq 'with_entries(select(.value != null and .value != ""))')

          # Set secrets
          echo "$FILTERED_SECRETS" | while IFS='=' read -r key value; do
            if [[ -n "$key" && -n "$value" ]]; then
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done

          # Set variables
          echo "$FILTERED_VARS" | while IFS='=' read -r key value; do
            if [[ -n "$key" && -n "$value" ]]; then
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done
        env:
          ALL_SECRETS: ${{ toJSON(secrets) }}
          ALL_VARIABLES: ${{ toJSON(vars) }}

      - name: Build Astro site
        run: bun run build

      - name: Wrangler Upload
        if: github.event_name == 'pull_request'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: "versions upload"
          workingDirectory: "."
          wranglerVersion: "3"
        id: upload

      - name: Extract Version ID
        if: github.event_name == 'pull_request'
        id: extract-version
        run: |
          # Extract version ID from the upload output
          VERSION_ID=$(echo "${{ steps.upload.outputs.command-output }}" | grep -o "Worker Version ID: [a-f0-9-]*" | cut -d' ' -f4)
          echo "VERSION_ID=$VERSION_ID" >> $GITHUB_OUTPUT
          echo "Extracted Version ID: $VERSION_ID"

      - name: Wrangler Deploy
        uses: cloudflare/wrangler-action@v3
        id: deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && 'deploy --env prod' || format('versions deploy {0}@100 -y', steps.extract-version.outputs.VERSION_ID) }}
          workingDirectory: "."
          wranglerVersion: "3"

      - name: Update PR comment with preview
        if: github.event_name == 'pull_request' && job.status == 'success'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: preview-deployment
          message: |
            ## ðŸš€ Preview Deployment

            **Status:** âœ… Successfully deployed
            **Deployment Type:** Version Upload + Deploy
            **Preview URL:** ${{ steps.upload.outputs.deployment-url || 'Preview deployment created successfully' }}
            **Commit:** ${{ github.sha }}

            ---
            *This comment will be automatically updated when new commits are pushed.*
