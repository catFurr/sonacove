name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy:
    name: Cloudflare
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'preview' }}
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Astro build
        uses: actions/cache@v4
        with:
          path: |
            dist/
            .astro/
          key: ${{ runner.os }}-astro-${{ hashFiles('src/**', 'astro.config.ts', 'tailwind.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-astro-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Set environment values
        run: |
          echo "üîß Setting up environment variables..."
          
          # Set secrets and variables
          echo "$ALL_SECRETS" | jq -r 'to_entries[] | select(.value != null and .value != "") | "\(.key)=\(.value)"' >> $GITHUB_ENV
          echo "$ALL_VARIABLES" | jq -r 'to_entries[] | select(.value != null and .value != "") | "\(.key)=\(.value)"' >> $GITHUB_ENV
          
          # Basic verification
          ENV_COUNT=$(cat $GITHUB_ENV | grep -E "^[A-Z_]+=" | wc -l)
          echo "‚úÖ Set $ENV_COUNT environment variables"
        env:
          ALL_SECRETS: ${{ toJSON(secrets) }}
          ALL_VARIABLES: ${{ toJSON(vars) }}

      - name: Sync environment values to Cloudflare
        id: sync-secrets
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            ENV_NAME="prod"
            ENV_FLAG="--env prod"
          else
            ENV_NAME="preview"
            ENV_FLAG=""
          fi

          echo "üîê Syncing secrets to Cloudflare environment: $ENV_NAME"

          # Combine secrets and variables into one JSON object for bulk upload
          # Both secrets and variables will be stored as secrets in Cloudflare
          COMBINED_SECRETS=$(jq -s '.[0] * .[1]' <(echo "$ALL_SECRETS") <(echo "$ALL_VARIABLES"))
          
          # Filter out null and empty values
          FILTERED_SECRETS=$(echo "$COMBINED_SECRETS" | jq 'with_entries(select(.value != null and .value != ""))')

          # Check if there are any secrets to sync
          if [[ $(echo "$FILTERED_SECRETS" | jq 'length') -eq 0 ]]; then
            echo "No secrets to sync."
          else
            echo "Syncing secrets using wrangler versions secret bulk..."
            # Use wrangler versions secret bulk to upload secrets without deploying
            echo "$FILTERED_SECRETS" | npx wrangler versions secret bulk $ENV_FLAG
            echo "‚úÖ Secret sync complete! A new version with updated secrets has been created."
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          ALL_SECRETS: ${{ toJSON(secrets) }}
          ALL_VARIABLES: ${{ toJSON(vars) }}

      - name: Build Astro site
        run: bun run build

      - name: Wrangler Upload
        if: github.event_name == 'pull_request'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: "versions upload"
          workingDirectory: "."
          wranglerVersion: "4.35.0"
          packageManager: bun
        id: upload

      - name: Extract Version ID
        if: github.event_name == 'pull_request'
        id: extract-version
        run: |
          # Extract version ID from the upload output
          VERSION_ID=$(echo "${{ steps.upload.outputs.command-output }}" | grep -o "Worker Version ID: [a-f0-9-]*" | cut -d' ' -f4)
          echo "VERSION_ID=$VERSION_ID" >> $GITHUB_OUTPUT
          echo "Extracted Version ID: $VERSION_ID"

      - name: Wrangler Deploy
        uses: cloudflare/wrangler-action@v3
        id: deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && 'deploy --env prod' || format('versions deploy {0}@100 -y', steps.extract-version.outputs.VERSION_ID) }}
          workingDirectory: "."
          wranglerVersion: "4.35.0"
          packageManager: bun

      - name: Extract Preview URL
        if: github.event_name == 'pull_request'
        id: extract-preview-url
        run: |
          # Try to extract preview URL from deployment output
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"
          
          if [[ -n "$DEPLOYMENT_URL" && "$DEPLOYMENT_URL" != "null" ]]; then
            echo "PREVIEW_URL=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "Found deployment URL: $DEPLOYMENT_URL"
          else
            # Construct preview URL based on Cloudflare Pages pattern
            # Format: https://{commit-hash}.{project-name}.pages.dev
            COMMIT_SHORT="${{ github.sha }}"
            COMMIT_SHORT="${COMMIT_SHORT:0:8}"
            CONSTRUCTED_URL="https://${COMMIT_SHORT}.sonacove.pages.dev"
            echo "PREVIEW_URL=$CONSTRUCTED_URL" >> $GITHUB_OUTPUT
            echo "Constructed preview URL: $CONSTRUCTED_URL"
          fi

      - name: Update PR comment with preview
        if: github.event_name == 'pull_request' && job.status == 'success'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: preview-deployment
          message: |
            ## üöÄ Preview Deployment

            **Status:** ‚úÖ Successfully deployed
            **Deployment Type:** Version Upload + Deploy
            **Preview URL:** ${{ steps.extract-preview-url.outputs.PREVIEW_URL }}
            **Commit:** ${{ github.sha }}

            ---
            *This comment will be automatically updated when new commits are pushed.*
